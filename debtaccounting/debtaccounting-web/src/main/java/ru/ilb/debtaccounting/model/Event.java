/**
 * This file was generated by the JPA Modeler
 */
package ru.ilb.debtaccounting.model;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.DiscriminatorType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.*;

/**
 * @author slavb
 */

@XmlAccessorType(XmlAccessType.FIELD)
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(discriminatorType = DiscriminatorType.INTEGER)
public abstract class Event implements Serializable {

    @Id
    @GeneratedValue
    private Long id;

    @Basic
    private LocalDate date;

    @ManyToOne(fetch = FetchType.LAZY)
    private Debt debt;

    @OneToMany(mappedBy = "event")
    @XmlTransient
    private List<Transaction> transactions;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Event withId(Long id) {
        this.id = id;
        return this;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public Event withDate(LocalDate date) {
        this.date = date;
        return this;
    }

    public Debt getDebt() {
        return debt;
    }

    public void setDebt(Debt debt) {
        this.debt = debt;
    }

    public Event withDebt(Debt debt) {
        this.debt = debt;
        return this;
    }

    public List<Transaction> getTransactions() {
        if (transactions == null) {
            transactions = new ArrayList<>();
        }
        return transactions;
    }

    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }

    public Event withTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
        return this;
    }

    public void addTransaction(Transaction transaction) {
        getTransactions().add(transaction);
        transaction.setEvent(this);
    }

    public void removeTransaction(Transaction transaction) {
        getTransactions().remove(transaction);
        transaction.setEvent(null);
    }

    public abstract void execute();

}